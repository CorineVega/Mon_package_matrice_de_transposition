transposition <- function(M, i, j){
# On essaie d'Ã©tablir la forme d'une matrice de transposition afin d'Ã©laborer la dÃ©fintion
# On vÃ©rifie que la matrice que l'utilisateur a entrÃ© respecte la forme gÃ©nÃ©rale d'une
# matrice de transposition dans un premier temps
In <- array(0, dim = c(dim(M)[1], dim(M)[2]))
diag(In) <- 1
Eii <- array(0, dim = c(dim(M)[1], dim(M)[2]))
Eii[i, i] <- 1
#print(Eii)
Ejj <- array(0, dim = c(dim(M)[1], dim(M)[2]))
Ejj[j, j] <-  1
#print(Ejj)
Eij <- array(0, dim = c(dim(M)[1], dim(M)[2]))
Eij[i, j] <- 1
#print(Eij)
Eji <- array(0, dim = c(dim(M)[1], dim(M)[2]))
Eji[j, i] <- 1
#print(Eji)
Tij <- In - Eii - Ejj + Eij + Eji
#print(Tij)
if(M != Tij && dim(M)[1] != dim(M)[2]){
return(FALSE)
}
else{
# On gÃ©nÃ¨re deux matrices pour faire les tests
A <- array(sample(1:5, dim(M)[1]*dim(M)[2], replace = TRUE), dim = c(dim(M)[1], dim(M)[2]))
# On rÃ©cupÃ¨re Ã©tant donnÃ© le fait qu'on va permuter les lignes par la suite
useA <- A
B <- array(sample(1:3, dim(M)[1]*dim(M)[2], replace = TRUE), dim = c(dim(M)[1], dim(M)[2]))
# On rÃ©cupÃ¨re Ã©tant donnÃ© le fait qu'on va permuter les colonnes par la suite
useB <- B
# La permutation des deux iÃ¨me et jÃ¨me lignes  de la matrice A
temp <- A[i, ]
A[i, ] <- A[j, ]
A[j, ] <- temp
perm1 <- A
# La permutation des deux iÃ¨me et jÃ¨me colonnes  de la matrice B
temp2 <- B[, i]
B[, i] <- B[, j]
B[, j] <- temp2
perm2 <- B
# VÃ©rifiaction des propiÃ©tÃ©s d'une matrice de transposition proprement dites
if(solve(M) == M && M%*%useA == perm1 && useB%*%M == perm2){
return(TRUE)
}
else{
return(FALSE)
}
}
}
devtools::load_all()
rm(list = c("transposition"))
devtools::load_all()
library(transposition)
help(transposition)
transposition(array(c(1,0,0,0,0,1,0,1,0), dim = c(3,3)), 2, 3)
transposition(array(c(1,0,0,0,0,1,0,1,0), dim = c(3,3)), 3, 2)
transposition(array(c(1,0,0,0,0,1,0,1,0), dim = c(3,3)), 3, 3)
transposition(array(c(1,0,0,0,0,1,0,1,0), dim = c(3,3)), 2, 2)
transposition(array(c(1,0,0,0,0,1,0,1,0), dim = c(3,3)), 2, 1)
transposition(array(c(1,0,0,0,0,1,0,1,0), dim = c(3,3)), 1, 1)
transposition(array(c(1,0,0,0,0,1,0,1,0), dim = c(3,3)), 1, 2)
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
transposition(array(c(1,0,0,0,0,1,0,1,0), dim = c(3,3)), 3, 2)
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
transposition(array(c(1,0,0,0,0,1,0,1,0), dim = c(3,3)), 3, 2)
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
transposition(array(c(1,0,0,0,0,1,0,1,0), dim = c(3,3)), 3, 2)
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
transposition(array(c(1,0,0,0,0,1,0,1,0), dim = c(3,3)), 3, 2)
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
transposition(array(c(1,0,0,0,0,1,0,1,0), dim = c(3,3)), 3, 2)
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
transposition(array(c(1,0,0,0,0,1,0,1,0), dim = c(3,3)), 3, 2)
# Load required packages -------------------------------------------------------
if (!require("pacman")) install.packages("pacman")
data <- read.table("data.txt")
data <- read.table("data")
diseased_vs_healthy <- read.delim(here("data", "data.txt"),
header = TRUE,
sep = "\t")
ggplot(economics, aes(unemploy/pop, uempmed))+
geom_path(color = "grey50")+
geom_point(aes(color = year(date)))
library(tidyverse)
library(ggridges)
library(patchwork)
library(viridis)
library(hrbrthemes)
library(gapminder)
theme_set(theme_bw())
ggplot(economics, aes(unemploy/pop, uempmed))+
geom_path(color = "grey50")+
geom_point(aes(color = year(date)))
year <- function(x) as.POSIXlt(x)$year+1900
ggplot(economics, aes(unemploy/pop, uempmed))+
geom_path(color = "grey50")+
geom_point(aes(color = year(date)))
ggplot(mpg, aes(cty, hwy))+
geom_point(alpha = 1/9)
download.file("https://raw.githubusercontent.com/biocorecrg/CRG_RIntroduction/master/de_df_for_volcano.rds", "de_df_for_volcano.rds", method="curl")
tmp <- readRDS("de_df_for_volcano.rds")
tmp
de <- tmp[complete.cases(tmp), ]
ggplot(data=de, aes(x=log2FoldChange, y=pvalue)) + geom_point()
ggplot(data=de, aes(x=log2FoldChange, y=pvalue)) + geom_point(color = "darkblue")
ggplot(data=de, aes(x=log2FoldChange, y=pvalue)) + geom_point(color = pvalue)
ggplot(data=de, aes(x=log2FoldChange, y=pvalue)) + geom_point(color = "darkpink")
ggplot(data=de, aes(x=log2FoldChange, y=pvalue)) + geom_point(color = "darkgreen")
p <- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue))) + geom_point()
# On ajoute un thème minimal
p <- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue))) + geom_point() + theme_minimal()
# On ajoute une ligne verticale pour log2FoldChange et une ligne horizontale
# pour pvalue
p2 <- p + geom_vline(xintercept=c(-0.6, 0.6), col="red") +
geom_hline(yintercept=-log10(0.05), col="red")
de$diffexpressed <- "NO"
de$diffexpressed[de$log2FoldChange > 0.6 & de$pvalue < 0.05] <- "UP
de$diffexpressed[de$log2FoldChange > 0.6 & de$pvalue < 0.05] <- "UP
de$diffexpressed[de$log2FoldChange < -0.6 & de$pvalue < 0.05] <- "DOWN"
de$diffexpressed[de$log2FoldChange > 0.6 & de$pvalue < 0.05] <- "UP
de$diffexpressed[de$log2FoldChange < -0.6 & de$pvalue < 0.05] <- "DOWN"
de$diffexpressed[de$log2FoldChange > 0.6 & de$pvalue < 0.05] <- "UP"
de$diffexpressed[de$log2FoldChange < -0.6 & de$pvalue < 0.05] <- "DOWN"
p <- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue), col=diffexpressed)) + geom_point() + theme_minimal()
p2 <- p + geom_vline(xintercept=c(-0.6, 0.6), col="red") +
geom_hline(yintercept=-log10(0.05), col="red")
p3 <- p2 + scale_color_manual(values=c("blue", "black", "red"))
mycolors <- c("blue", "red", "black")
names(mycolors) <- c("DOWN", "UP", "NO")
p3 <- p2 + scale_colour_manual(values = mycolors)
de$delabel <- NA
de$delabel[de$diffexpressed != "NO"] <- de$gene_symbol[de$diffexpressed != "NO"]
ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue), col=diffexpressed, label=delabel)) +
geom_point() +
theme_minimal() +
geom_text()
# On ajoute une ligne verticale pour log2FoldChange et une ligne horizontale
# pour pvalue
p2 <- p + geom_vline(xintercept=c(-0.6, 0.6), col="red") +
geom_hline(yintercept=-log10(0.05), col="red")
p2
p
p
devtools::load_all()
devtools::load_all()
devtools::load_all()
rm(list = ls())
devtools::load_all()
devtools::has_dev()
devtools::has_devel()
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
devtools::load_all()
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
devtools::load_all()
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
devtools::load_all()
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
devtools::load_all()
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
devtools::load_all()
rm(list = ls())
devtools::load_all()
help(transposition)
transposition::transposition(array(c(1,0,0,0,0,1,0,1,0), dim = c(3,3)), 2, 3))
transposition::transposition(array(c(1,0,0,0,0,1,0,1,0), dim = c(3,3)), 2, 3)
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
devtools::load_all()
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
devtools::load_all()
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
devtools::load_all()
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
devtools::load_all()
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
devtools::load_all()
rm(list = ls())
devtools::load_all()
help(transposition)
source("E:/ENSPD_L3/Introduction_R/transposition/R/transposition.R")
devtools::load_all()
rm(list = ls())
devtools::load_all()
p <- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue))) + geom_point()
library(tidyverse)
p <- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue))) + geom_point()
download.file("https://raw.githubusercontent.com/biocorecrg/CRG_RIntroduction/master/de_df_for_volcano.rds", "de_df_for_volcano.rds", method="curl")
download.file("https://raw.githubusercontent.com/biocorecrg/CRG_RIntroduction/master/de_df_for_volcano.rds", "de_df_for_volcano.rds", method="curl")
tmp <- readRDS("de_df_for_volcano.rds")
de <- tmp[complete.cases(tmp), ]
ggplot(data=de, aes(x=log2FoldChange, y=pvalue)) + geom_point(color = "darkgreen")
p <- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue))) + geom_point()
p
# On ajoute un thème minimal
p <- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue))) + geom_point() + theme_minimal()
p
# On ajoute une ligne verticale pour log2FoldChange et une ligne horizontale
# pour pvalue
p2 <- p + geom_vline(xintercept=c(-0.6, 0.6), col="red") +
geom_hline(yintercept=-log10(0.05), col="red")
# affichage
p2
ggplot(data=de, aes(x=log2FoldChange, y=pvalue)) + geom_point(color = "darkgreen")
p <- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue))) + geom_point()
p
# On ajoute un thème minimal
p <- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue))) + geom_point() + theme_minimal()
p
# On ajoute une ligne verticale pour log2FoldChange et une ligne horizontale
# pour pvalue
p2 <- p + geom_vline(xintercept=c(-0.6, 0.6), col="red") +
geom_hline(yintercept=-log10(0.05), col="red")
# affichage
p2
de$diffexpressed <- "NO"
de$diffexpressed[de$log2FoldChange > 0.6 & de$pvalue < 0.05] <- "UP"
de$diffexpressed[de$log2FoldChange < -0.6 & de$pvalue < 0.05] <- "DOWN"
p <- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue), col=diffexpressed)) + geom_point() + theme_minimal()
p2 <- p + geom_vline(xintercept=c(-0.6, 0.6), col="red") +
geom_hline(yintercept=-log10(0.05), col="red")
p3 <- p2 + scale_color_manual(values=c("blue", "black", "red"))
mycolors <- c("blue", "red", "black")
names(mycolors) <- c("DOWN", "UP", "NO")
p3 <- p2 + scale_colour_manual(values = mycolors)
de$delabel <- NA
de$delabel[de$diffexpressed != "NO"] <- de$gene_symbol[de$diffexpressed != "NO"]
ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue), col=diffexpressed, label=delabel)) +
geom_point() +
theme_minimal() +
geom_text()
tmpsave <- saveRDS("de_df_for_volcano.rds")
download.file("https://raw.githubusercontent.com/biocorecrg/CRG_RIntroduction/master/de_df_for_volcano.rds", "de_df_for_volcano.rds", method="curl")
tmpsave <- saveRDS("de_df_for_volcano.rds")
tmpsave <- saveRDS(object, file = "de_df_for_volcano.rds")
tmpsave <- saveRDS(data, file = "de_df_for_volcano.rds")
tmpsave
data <- download.file("https://raw.githubusercontent.com/biocorecrg/CRG_RIntroduction/master/de_df_for_volcano.rds", "de_df_for_volcano.rds", method="curl")
tmpsave <- saveRDS(data, file = "de_df_for_volcano.rds")
tmpsave
devtools::document()
help(transposition)
getwd()
